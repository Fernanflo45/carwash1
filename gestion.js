// Aseg√∫rate de que estas variables globales est√©n definidas por el entorno de Canvas.
// Si se ejecuta fuera de Canvas, es posible que necesites definirlas manualmente para pruebas.
// Estas variables son proporcionadas por el entorno de Canvas para la configuraci√≥n de Firebase y la autenticaci√≥n.
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-carwash-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
    // Tus credenciales de Firebase proporcionadas como respaldo si __firebase_config no est√° definido
    apiKey: "AIzaSyAYpuXAgcKmXHfK5Gofr7fTAYbhneHP0EY",
    authDomain: "carwash-c8f16.firebaseapp.com",
    projectId: "carwash-c8f16",
    storageBucket: "carwash-c8f16.firebasestorage.app",
    messagingSenderId: "663277593007",
    appId: "1:663277593007:web:29894669ae2300593c4f5a",
    measurementId: "G-T3JDPPEHVR"
};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Importaciones del SDK modular de Firebase.
// Estas l√≠neas deben estar presentes en tu archivo JavaScript
// cuando uses el SDK modular de Firebase.
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js';
import { getFirestore, collection, addDoc, getDocs, query, where, doc, getDoc, setDoc, runTransaction } from 'https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js';

// Inicializa la aplicaci√≥n de Firebase con la configuraci√≥n proporcionada.
const app = initializeApp(firebaseConfig);
// Obtiene una referencia al servicio de base de datos de Firestore.
const db = getFirestore(app);
// Obtiene una referencia al servicio de autenticaci√≥n.
const auth = getAuth(app);

let userId = null; // Variable para almacenar el ID del usuario actual despu√©s de la autenticaci√≥n.

/**
 * Autentica al usuario. Intenta iniciar sesi√≥n con un token personalizado si lo proporciona el entorno,
 * de lo contrario, inicia sesi√≥n de forma an√≥nima.
 */
async function authenticateUser() {
    try {
        if (initialAuthToken) {
            await signInWithCustomToken(auth, initialAuthToken);
            console.log("Sesi√≥n iniciada con token personalizado.");
        } else {
            await signInAnonymously(auth);
            console.log("Sesi√≥n iniciada de forma an√≥nima.");
        }
    } catch (error) {
        console.error("Error de autenticaci√≥n de Firebase:", error);
        showToast("‚ùå Error de autenticaci√≥n."); // Mensaje de error de autenticaci√≥n.
    }
}

// Escucha los cambios en el estado de autenticaci√≥n. Esto asegura que el userId se actualice
// cada vez que el estado de autenticaci√≥n del usuario cambie (por ejemplo, despu√©s del inicio de sesi√≥n inicial).
onAuthStateChanged(auth, (user) => {
    if (user) {
        userId = user.uid; // Establece el userId al UID del usuario autenticado.
        console.log("ID de usuario:", userId);
        // Las operaciones de Firestore se activan mediante clics en botones, por lo que no se necesita ninguna acci√≥n inmediata aqu√≠.
    } else {
        userId = null; // Borra el userId si no hay ning√∫n usuario con sesi√≥n iniciada.
        console.log("No hay ning√∫n usuario con sesi√≥n iniciada.");
    }
});

// Llama a la funci√≥n de autenticaci√≥n cuando el DOM est√© completamente cargado.
// Esto asegura que Firebase se inicialice y el usuario se autentique antes de
// intentar cualquier operaci√≥n de Firestore.
document.addEventListener('DOMContentLoaded', authenticateUser);

/**
 * Alterna la visibilidad de diferentes secciones en la aplicaci√≥n (por ejemplo, "Insertar Cliente" o "Buscar Cliente").
 * @param {string} id - El ID de la secci√≥n que se va a mostrar.
 */
function showSection(id) {
    // Primero oculta todas las secciones.
    document.querySelectorAll('.seccion').forEach(sec => sec.classList.add('hidden'));
    // Muestra la secci√≥n seleccionada.
    document.getElementById(id).classList.remove('hidden');
    // Borra los resultados de b√∫squeda y el criterio al cambiar a la secci√≥n 'insertar'.
    if (id === 'insertar') {
        document.getElementById('resultado').innerHTML = '';
        document.getElementById('criterio').value = '';
    }
}

/**
 * Inserta un nuevo registro de cliente en la base de datos de Firestore.
 * Recupera datos de los campos de entrada, realiza una validaci√≥n b√°sica,
 * y verifica que la placa y el n√∫mero de carro no est√©n duplicados antes de agregar el documento.
 */
async function insertarCliente() {
    const nombre = document.getElementById('nombre').value.trim();
    const telefono = document.getElementById('telefono').value.trim();
    const placa = document.getElementById('placa').value.trim();
    // Obtiene el n√∫mero de carro del nuevo campo de entrada
    const carNumber = document.getElementById('carNumber').value.trim();

    // Validaci√≥n b√°sica del lado del cliente para asegurar que todos los campos est√©n llenos.
    if (!nombre || !telefono || !placa || !carNumber) {
        showToast('Por favor llena todos los campos, incluyendo el n√∫mero de carro.'); // Mensaje para campos incompletos.
        return;
    }

    // Asegura que el n√∫mero de carro sea un n√∫mero v√°lido
    if (isNaN(carNumber) || parseInt(carNumber) <= 0) {
        showToast('El n√∫mero de carro debe ser un n√∫mero positivo.');
        return;
    }

    // Asegura que el usuario est√© autenticado antes de intentar escribir en Firestore.
    if (!userId) {
        showToast('‚ùå Error: Usuario no autenticado. Intenta recargar la p√°gina.'); // Mensaje de usuario no autenticado.
        console.error('Operaci√≥n de Firestore intentada sin usuario autenticado.');
        return;
    }

    try {
        const clientesCol = collection(db, 'clientes');

        // --- Verificaci√≥n de duplicados ---
        // Consulta para verificar si la placa ya existe
        const qPlaca = query(clientesCol, where('placa', '==', placa));
        const placaSnapshot = await getDocs(qPlaca);

        if (!placaSnapshot.empty) {
            showToast('‚ùå Error: Ya existe un cliente con esa placa.');
            return;
        }

        // Consulta para verificar si el n√∫mero de carro ya existe
        const qCarNumber = query(clientesCol, where('carNumber', '==', parseInt(carNumber)));
        const carNumberSnapshot = await getDocs(qCarNumber);

        if (!carNumberSnapshot.empty) {
            showToast('‚ùå Error: Ya existe un cliente con ese n√∫mero de carro.');
            return;
        }
        // --- Fin de verificaci√≥n de duplicados ---

        // Si no hay duplicados, guarda el nuevo cliente.
        await addDoc(clientesCol, {
            nombre: nombre,
            telefono: telefono,
            placa: placa,
            carNumber: parseInt(carNumber), // Guarda el n√∫mero de carro como un n√∫mero entero
            createdAt: new Date(), // Marca de tiempo de creaci√≥n.
            createdBy: userId // ID del usuario que cre√≥ el registro.
        });

        // Borra los campos de entrada despu√©s de una inserci√≥n de datos exitosa.
        document.getElementById('nombre').value = '';
        document.getElementById('telefono').value = '';
        document.getElementById('placa').value = '';
        document.getElementById('carNumber').value = ''; // Borra tambi√©n el campo de n√∫mero de carro
        showToast(`‚úÖ Cliente agregado correctamente. N√∫mero de Carro: ${carNumber}`); // Muestra el mensaje de √©xito con el n√∫mero de carro.

    } catch (error) {
        console.error('Error al guardar cliente:', error);
        showToast("‚ùå Error al guardar cliente"); // Muestra el mensaje de error.
    }
}

/**
 * Busca registros de clientes en la base de datos de Firestore bas√°ndose en un criterio dado (nombre o n√∫mero de placa).
 * Recupera todos los clientes y luego los filtra en el lado del cliente.
 */
async function buscarCliente() {
    const criterio = document.getElementById('criterio').value.trim().toLowerCase();
    const resultadoDiv = document.getElementById('resultado');
    resultadoDiv.innerHTML = "üîç Buscando..."; // Muestra un mensaje de carga.

    // Si no se introduce ning√∫n criterio de b√∫squeda, se le pide al usuario.
    if (!criterio) {
        resultadoDiv.innerHTML = '<p>Por favor ingresa un criterio de b√∫squeda.</p>';
        return;
    }

    // Asegura que el usuario est√© autenticado antes de intentar leer de Firestore.
    if (!userId) {
        showToast('‚ùå Error: Usuario no autenticado. Intenta recargar la p√°gina.'); // Mensaje de usuario no autenticado.
        console.error('Operaci√≥n de Firestore intentada sin usuario autenticado.');
        resultadoDiv.innerHTML = '<p>Error al cargar clientes.</p>';
        return;
    }

    try {
        // Obtiene una referencia a la colecci√≥n 'clientes'.
        const clientesCol = collection(db, 'clientes');
        // Recupera todos los documentos de la colecci√≥n 'clientes'.
        // Para conjuntos de datos muy grandes, considera implementar b√∫squedas del lado del servidor o consultas de Firestore m√°s espec√≠ficas
        // si se necesitan coincidencias exactas, pero para coincidencias parciales, el filtrado del lado del cliente es com√∫n.
        const querySnapshot = await getDocs(clientesCol);

        let encontrado = false;
        resultadoDiv.innerHTML = ''; // Borra los resultados de b√∫squeda anteriores.

        // Itera sobre cada documento recuperado de Firestore.
        querySnapshot.forEach(doc => {
            const data = doc.data(); // Obtiene los campos de datos del documento.
            // Formatea el n√∫mero de carro para mostrarlo, si existe.
            const carNumberDisplay = data.carNumber ? `${data.carNumber}` : 'No asignado';

            // Realiza una b√∫squeda que no distingue entre may√∫sculas y min√∫sculas en los campos 'nombre' y 'placa'.
            // Tambi√©n permite buscar por n√∫mero de carro exacto (como string para la comparaci√≥n de entrada)
            if (
                data.nombre.toLowerCase().includes(criterio) ||
                data.placa.toLowerCase().includes(criterio) ||
                (data.carNumber && data.carNumber.toString() === criterio) // Permite buscar por n√∫mero de carro
            ) {
                // Si se encuentra una coincidencia, agrega los detalles del cliente al div de resultados.
                resultadoDiv.innerHTML += `
                    <div style="background-color: #fff; color: #000; padding: 10px; margin: 10px 0; border-radius: 8px;">
                        <p><strong>Nombre:</strong> ${data.nombre}</p>
                        <p><strong>Tel√©fono:</strong> ${data.telefono}</p>
                        <p><strong>Placa:</strong> ${data.placa}</p>
                        <p><strong>N√∫mero de Carro:</strong> ${carNumberDisplay}</p> <!-- Muestra el n√∫mero de carro -->
                    </div>`;
                encontrado = true; // Marca que se encontr√≥ al menos un cliente.
            }
        });

        // Si no se encontraron clientes despu√©s de revisar todos los documentos, muestra un mensaje.
        if (!encontrado) {
            resultadoDiv.innerHTML = '<p>No se encontr√≥ ning√∫n cliente con ese criterio.</p>';
        }
    } catch (error) {
        console.error('Error al buscar cliente:', error);
        showToast("‚ùå Error al buscar cliente"); // Muestra el mensaje de error.
        resultadoDiv.innerHTML = '<p>Error al cargar clientes.</p>';
    }
}

/**
 * Muestra una notificaci√≥n temporal de "toast" con un mensaje dado.
 * El "toast" se ocultar√° autom√°ticamente despu√©s de 3 segundos.
 * @param {string} mensaje - El texto del mensaje que se mostrar√° en el "toast".
 */
function showToast(mensaje) {
    const toast = document.getElementById("toast");
    toast.textContent = mensaje; // Establece el texto del mensaje.
    toast.classList.add("show"); // Agrega la clase 'show' para hacer visible el "toast" (CSS maneja la animaci√≥n).
    setTimeout(() => {
        toast.classList.remove("show"); // Elimina la clase 'show' despu√©s de 3 segundos para ocultar el "toast".
    }, 3000); // 3000 milisegundos = 3 segundos.
}

// Hace que las funciones sean accesibles globalmente. Esto es necesario cuando se usan M√≥dulos ES (type="module" en HTML)
// y se llaman funciones directamente desde los atributos `onclick` de HTML.
window.showSection = showSection;
window.insertarCliente = insertarCliente;
window.buscarCliente = buscarCliente;
window.showToast = showToast;
